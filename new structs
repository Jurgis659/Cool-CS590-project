#include "lygia/sdf/sphereSDF.glsl"
#include "lygia/sdf/planeSDF.glsl"
#include "lygia/sdf/cubeSDF.glsl"
#include "lygia/math/rotate3dY.glsl"
#include "lygia/math/rotate3dX.glsl"
#include "lygia/generative/snoise.glsl"
#include "shapes2d.stoy"

#define MAX_MARCH_STEPS 64
#define THRESHOLD 0.1
#define MAX_DISTANCE 32.0
#define LIGHT_ATTENUATION_FACTOR 10.0
#define ABSORPTION_COEFFICIENT_B 1.0
#define ABSORPTION_COEFFICIENT_RG 0.3
#define AIR_IOR 1.0
#define WATER_IOR 1.00

#define WATER_ALBEDO 0.7

#define NUM_SHAPES 2
#define NUM_LIGHTS 2
#define WATER_ID 0
#define OPAQUE_ID 1
#define NO_SHAPE_ID 999

#define advancement 5.0*fract(0.05*iTime)
//#define cameraZ (-10.0 * advancement)
#define cameraZ 0.0

vec3 groundColor = vec3(0., 10., 10.) / 255.;
vec3 skyColor = vec3(177., 202., 233.) / 255.0;
vec3 baseWaterColor = vec3(0.0, 0.412, 0.58);

struct Shape {
    int id;
    vec3 color;
    float indexOfRefraction;
    float opacity; // 1 if opaque, 0 if not (like water)
};

struct Light {
    vec3 pos;
    vec3 color;
};

struct Ray {
    vec3 origin;
    vec3 direction;
};

struct Raymarcher {
    Ray ray;
    Shape shape;
    int steps;
    float dist;
    float shadow;
    vec3 lighting;
};

struct Scene {
    Shape[NUM_SHAPES] shapes;
    Light[NUM_LIGHTS] lights;
    vec3 cameraPos;
};


Scene sceneInit() {
    Scene s;
    Light light0 = Light(vec3(0.0, 10.0, 2.0 -cameraZ), vec3(1.0, 1.0, 1.0));
    Light light1 = Light(vec3(0.0, 1.0, -6.0 -cameraZ), vec3(1.0, 1.0, 1.0));

    Shape water;
    water.id = WATER_ID;
    water.color = vec3(0.0, 0.0, 0.0);
    water.indexOfRefraction = WATER_IOR;
    water.opacity = 0.0;
    s.shapes[WATER_ID] = water;

    Shape opaque;
    opaque.id = OPAQUE_ID;
    opaque.color = vec3(0.0, 0.0, 0.0);
    opaque.indexOfRefraction = 1.0;
    opaque.opacity = 1.0;
    s.shapes[OPAQUE_ID] = opaque;

    s.lights = Light[2](light0, light1);

    return s;
}

float BeerLambert(float absorptionCoefficient, float distanceTraveled)
{
    return exp(-absorptionCoefficient * distanceTraveled);
}

float GetLightAttenuation(float distanceToLight)
{
    return 1.0 / pow(distanceToLight, LIGHT_ATTENUATION_FACTOR);
}

// Taken from https://iquilezles.org/articles/fbm/
float fbm( in vec4 x, in float H )
{    
    float G = exp2(-H);
    float f = 1.0;
    float a = 1.0;
    float t = 0.0;
    int numOctaves = 4;
    for( int i=0; i<numOctaves; i++ )
    {
        t += a*snoise(f*x);
        f *= 2.0;
        a *= G;
    }
    return t;
}

float opaqueSDF(vec3 p) {
    float plane = planeSDF(p + vec3(0.0, 2.0, 0.0));
    return plane;
    return min(plane, sdBoat(p-vec3(0.0,.0, -2.)));
}

float waterSDF(vec3 p) {
   // p = rotate3dY(0.7) * p;
    float rect = sdBox(p-vec3(0.0, -2., cameraZ), vec3(5.0, 1.0, 5.0));
    rect += 0.1 * fbm(0.5 * vec4(p, iTime), 1.0);
    return rect;

}


int closestObjId(vec3 p) {
    return waterSDF(p) < opaqueSDF(p) ? WATER_ID : OPAQUE_ID;
}

Shape shapeFromId(Scene scene, int id) {
    return scene.shapes[id];
}

vec3 calcNormal(vec3 p) {
    const float h = 0.00001; 
    const vec2 k = vec2(1,-1);
    return normalize(k.xyy*opaqueSDF(p+k.xyy*h)+//
        k.yyx*opaqueSDF(p+k.yyx*h)+//
        k.yxy*opaqueSDF(p+k.yxy*h)+//
        k.xxx*opaqueSDF(p+k.xxx*h));
}

vec3 calcWaterNormal(vec3 p) {
    const float h = 0.0005; 
    const vec2 k = vec2(1, -1);
    return normalize(
        k.xyy * waterSDF(p + k.xyy * h) +
        k.yyx * waterSDF(p + k.yyx * h) +
        k.yxy * waterSDF(p + k.yxy * h) +
        k.xxx * waterSDF(p + k.xxx * h)
    );
}




Raymarcher opaqueRayMarch(Raymarcher r, Scene scene) {
    float d = r.dist;
    float dist_to_obj;
    vec3 position;
    vec3 ro = r.ray.origin;
    vec3 rd = r.ray.direction;
    int i;
    int object_id = NO_SHAPE_ID;

    for (i = r.steps; i < MAX_MARCH_STEPS && d < MAX_DISTANCE; i++) {
        position = ro + d * rd;
        dist_to_obj = opaqueSDF(position);
        if (dist_to_obj < THRESHOLD) {
            object_id = closestObjId(position);
            break;
        }
        d += opaqueSDF(position);
    }

    Raymarcher rFinal;
    rFinal.dist = d;
    rFinal.steps = i;
    rFinal.ray = r.ray;
    rFinal.shape = shapeFromId(scene, object_id);
    rFinal.shadow = r.shadow;
    rFinal.lighting = r.lighting;
    return rFinal;
    
}


float IntersectVolumetric(in vec3 rayOrigin, in vec3 rayDirection, float maxT)
{
    // Precision isn't super important, just want a decent starting point before 
    // ray marching with fixed steps
	float precis = 0.005; 
    
    if (waterSDF(rayOrigin) > 0.0) {
        float t = 0.0;
        for(int i=0; i<100; i++ )
        {
            float result = waterSDF( rayOrigin+rayDirection*t);
            if( result < (precis) || t>maxT ) break;
            t += result;
        }
        return ( t>=maxT ) ? -1.0 : t;
    } else {
        float t = 0.5;
        for(int i=0; i<100; i++ )
        {
            float result = -waterSDF( rayOrigin+rayDirection*t);
            if( result < (precis) || t>maxT ) break;
            t += result;
        }
        return ( t>=maxT ) ? -1.0 : t;
    }
}



Raymarcher waterRayMarch(Raymarcher r, Scene scene, vec3 skyColor) {

    float d = r.dist;
    float dist_to_surface;
    float march_size = 0.01;
    vec3 volumetricColor = r.lighting;
    vec3 finalColor;
    vec3 position;
    vec3 visibility = vec3(1.0);

    vec3 ro = r.ray.origin;
    vec3 rd = r.ray.direction;
    int i;
    for (i = r.steps; i < MAX_MARCH_STEPS && d < MAX_DISTANCE; i++) {
        d += march_size;
        position = ro + d * rd;
        dist_to_surface = -waterSDF(position);
        bool inWater = dist_to_surface > 0.0;
        if (!inWater) break;
            vec3 prevVisibility = visibility;
            visibility *= vec3(BeerLambert(ABSORPTION_COEFFICIENT_RG, march_size),
                                BeerLambert(ABSORPTION_COEFFICIENT_RG, march_size),
                                BeerLambert(ABSORPTION_COEFFICIENT_B, march_size));
            vec3 absorptionFromMarch = prevVisibility - visibility;

            for(int lightIndex = 0; lightIndex < scene.lights.length(); lightIndex++) {
                float lightDistance = length(scene.lights[lightIndex].pos - position);
                // vec3 lightColor = lights[lightIndex].color * GetLightAttenuation(lightDistance) * GetLightVisibility(position, lights[lightIndex].pos - position, 100.0, 16, 1.0);  
                vec3 lightColor = scene.lights[lightIndex].color * GetLightAttenuation(lightDistance);
                volumetricColor += absorptionFromMarch * WATER_ALBEDO * lightColor;
		    }
		    volumetricColor += absorptionFromMarch * WATER_ALBEDO * skyColor;
    }
    Raymarcher rFinal;
    Ray refractedRay;
    refractedRay.origin = position;
    refractedRay.direction = refract(rd, -calcWaterNormal(position), WATER_IOR / AIR_IOR);
    rFinal.ray = refractedRay;
    rFinal.lighting = volumetricColor;
    rFinal.steps = i;
    rFinal.dist = d;
    rFinal.shadow = r.shadow;
    rFinal.shape = r.shape;
    return rFinal;
}






void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec2 uv = fragCoord/iResolution.xy;
    uv -= 0.5;
    uv.x *= iResolution.x/iResolution.y;

   // float cameraZ = 10.0;
    float speed = 1.2;
    float height = 0.5;
    float intensity = 1.4;

    vec3 rd = normalize(vec3(uv,-1.0));
    rd = rotate3dX(0.3 * intensity * cos(speed * advancement))*rd;
    vec3 ro = vec3(0.0, height + intensity * sin(speed * advancement), cameraZ);

    Scene scene = sceneInit();

    Raymarcher r;
    r.ray = Ray(ro, rd);
    r.steps = 0;
    r.dist = 0.0;
    r.shadow = 1.0;
    r.lighting = vec3(0.0);

    r = opaqueRayMarch(r, scene);

    if (r.shape.id == WATER_ID) {
        r = waterRayMarch(r, scene, skyColor);
        r = opaqueRayMarch(r, scene);
    }

    

    
//     float distToWater = IntersectVolumetric(ro, rd, 100.0);
//     vec3 waterColor = vec3(0.0);
//     if (distToWater > 0.0) {
//     vec3 waterIntersection = ro + rd * distToWater;

//     vec3 waterEntryNormal = calcWaterNormal(waterIntersection);
//     vec3 refractedDir = refract(rd, waterEntryNormal, AIR_IOR / WATER_IOR);

//     vec3 insideWaterColor = waterRayMarch(waterIntersection, refractedDir, skyColor);

//     float distToExit = IntersectVolumetric(waterIntersection, refractedDir, 100.0);
//     vec3 exitPoint = waterIntersection + refractedDir * distToExit;
//     vec3 exitNormal = calcWaterNormal(exitPoint);
//     vec3 exitDir = refract(refractedDir, -exitNormal, WATER_IOR / AIR_IOR);

//     vec3 outsideColor = (opaqueRayMarch(exitPoint, exitDir) < 0.5 ? skyColor : groundColor);

//     float fresnelFactor = pow(1.0 - dot(-rd, waterEntryNormal), 3.0);
//     vec3 reflectionDir = reflect(rd, waterEntryNormal);
//     vec3 reflectedColor = (opaqueRayMarch(waterIntersection, reflectionDir) < 0.5 ? skyColor : groundColor);

//     waterColor = insideWaterColor * (1.0 - fresnelFactor) + reflectedColor * fresnelFactor;
//     waterColor += outsideColor * 0.1; 
// }

    vec3 color = r.lighting;
    fragColor = vec4(color, 1.0);
}
