#define MAX_DIST 32.0
#define MAX_STEPS 64
#define THRESHOLD 0.01
#include "lygia/sdf/sphereSDF.glsl"
#include "lygia/generative/snoise.glsl"
#include "lygia/math/rotate3dX.glsl" 
#include "lygia/math/rotate3dY.glsl" 
#include "lygia/math/rotate3dZ.glsl" 
#include "lygia/sdf/boxSDF.glsl"
#include "lygia/sdf/planeSDF.glsl"
#include "lygia/generative/snoise.glsl"
#include "lygia/space/rotateY.glsl"
#include "lygia/space/rotateX.glsl"
#include "lygia/space/rotateZ.glsl"
#define ROWS 15
#define COLS 15
#define clamp01(a) clamp(a,0.0,1.0)
#define opS(d1,d2) max(-d1,d2)

float sdCappedCylinder( vec3 p, float h, float r )
{
  vec2 d = abs(vec2(length(p.xz),p.y)) - vec2(r,h);
  return min(max(d.x,d.y),0.0) + length(max(d,0.0));
}


struct Light {
    vec3 pos;
    vec3 color;
};
float smin(float a, float b, float k) {
    float h = clamp(0.5 + 0.5*(a-b)/k, 0.0, 1.0);
    return mix(a, b, h) - k*h*(1.0-h);
}
 
float sdBoatHull( vec3 vPos )
{
    vPos.y-=0.4;
    vec3 vBoatDomain = vPos;
    vBoatDomain.x = abs(vBoatDomain.x);
    
    float boatDist = length( vBoatDomain.xyz - vec3(-3.9,3.2,0.)) - 5.6;
	
    
    float bs = 14.5;
    float gap = 0.3;
    vec2 offset=vec2(0.3,bs+gap);
    float cylinder= length(vBoatDomain.xy-offset)-bs;
    boatDist=opS(cylinder,boatDist);
    float sSize = 15.0;
    float sOff = 0.05;
    float sphere = length( vBoatDomain.xyz - vec3(0,sSize+sOff,0)) - sSize;
    boatDist=opS(sphere,boatDist);
    
    float bx = vPos.y+0.4;
    boatDist=opS(bx,boatDist);
    
    return boatDist;
}

float prismSDF(vec3 position, float halfWidth, float halfHeight, float halfDepth) {

    vec2 e = vec2(halfWidth, -halfHeight);
    vec2 d1 = vec2(-halfWidth - position.x, max(abs(position.y) - halfHeight, 0.0));
    vec2 d2 = position.xy - e * clamp(dot(position.xy, e) / dot(e, e), -1.0, 1.0);
    vec2 d3 = vec2(max(abs(position.x) - halfWidth, 0.0), -halfHeight - position.y); 
    float d4 = sqrt(min(min(dot(d1, d1), dot(d2, d2)), dot(d3, d3))) * sign(max(max(max(d1.x, d2.x), d2.y), d3.y));
    float d5 = abs(position.z) - halfDepth;
    return length(max(vec2(d4, d5), 0.0)) + min(max(d4, d5), 0.0);
}
float hyperbolicParaboloid(vec3 p, float a, float b, vec3 boundsMin, vec3 boundsMax) {
    // Implicit equation of hyperbolic paraboloid: z = x²/a² - y²/b²
    float h = p.z - (p.x * p.x) / (a * a) + (p.y * p.y) / (b * b);
    
    // Signed distance approximation
    float sdf = h / sqrt(1.0 + (2.0 * p.x / (a * a)) * (2.0 * p.x / (a * a)) +
                            (2.0 * p.y / (b * b)) * (2.0 * p.y / (b * b)));
    
    // Restrict the space to the bounding box
    vec3 q = max(boundsMin - p, vec3(0.0)) + max(p - boundsMax, vec3(0.0));
    float boxDist = length(q);
    
    // Combine paraboloid and bounding box
    return max(sdf, boxDist);
}

float sdBoat(vec3 pos){
    float ret = 2000.;
    //body
   // pos = rotateX(pos, 0.15*sin(iTime));
   // pos = rotateY(pos, 0.05*sin(iTime));
    float vb = sdBoatHull(pos);
    pos.y -=0.07;
    float vs = sdBoatHull(pos);
    float boatBody =  opS(vs,vb);
    float box = boxSDF(pos-vec3(0.0, 2.1, .7), vec3(.03, 2.0, .03));
    
   

    ret = min(min(ret , boatBody), box);
    
    return ret;
}

float opCheapBend(in vec3 p )
{
    const float k =1.0; // or some other amount
    float c = cos(k*p.x);
    float s = sin(k*p.x);
    mat2  m = mat2(c,-s,s,c);
    vec3  q = vec3(m*p.xy,p.z);
    return prismSDF(q-vec3(.18, 2.9, .0), .9, 1.7, .02);
}
vec3 bendBest( vec3 p )
{
    float c = cos(1.0*p.y);
    float s = sin(1.0*p.y);
    mat2  m = mat2(c,-s,s,c);
    return vec3(m*p.xy,p.z);
}

float sdPlane( vec3 p, vec3 n, float h)
{
  // n must be normalized
  return dot(p,n) + h;
}

vec4 unionS(vec4 a, vec4 b){
    if(a.x <b.x){
        return a;
    }
    else{
        return b;
    }
}
vec4 unionSmooth(vec4 a, vec4 b){
    float m = smin(a.x, b.x, .05);
    if(a.x <b.x){
        return vec4(m, a.yzw);
    }
    else{
        return vec4(m, b.yzw);
    }
}

 
vec4 scene(vec3 p) {
    // float noise = snoise(p,iTime);
    
   
    
    p -=vec3(.0, 1.0, .0);
    vec4 plane = vec4(planeSDF(p, vec3(0.0, 0.13, .0), vec3(0.0, 0.1, 0.0)), vec3(107.0,142,35)/255.0);
    float texture = 0.5 * (1.0+cos(200.0 * (p.x)));
    float texture2 = 0.5 * (1.0+cos(200.0 * (p.z)));
    vec3 boatcolor = mix(vec3(.5, .3, .2), vec3(.0), texture-texture2);
    //vec3(188, 74, 60)/255.0)
    //snoisevec3 opCheapBend( vec3 p )
   
    p = rotateZ(p, snoise(vec4(vec3(.0), iTime/10.0))/2.0);
    p = rotateY(p, snoise(vec4(vec3(.0), iTime/10.0))/2.0);
    float boat = sdBoat(p);
     vec4 sitting = vec4(boxSDF(p-vec3(.0, .35, -1.5), vec3(.35, .02, .15)), boatcolor);
    vec4 bendedBox = vec4(bendBest(p), vec3(.4));
    vec3 boundsMin = vec3(-0.9, -2.0, -.2);
    vec3 boundsMax = vec3 (.9, 2.0, .4);
    p = rotateX(p, 3.14/2.0+3.4);
    vec4 cylinder = vec4(sdCappedCylinder(p-vec3(.0, 3.15, .05), .5, .015), boatcolor);
    p = rotateX(p, -.3);
     vec4 steering2 = vec4(sdCappedCylinder(p -vec3(.0, -2.555, -.6),.5, .02), boatcolor);
   p = rotateX(p, -(3.14/2.0+3.1));
   
    p = rotateY(p, 3.14/2.0+3.14);
      p = rotateY(p, 3.14);
     vec4 sail2 = vec4(prismSDF(p-vec3(2.1, 2.5, .0), 1.4, 1.6, .02),vec3(.9));
      vec4 steering = vec4(boxSDF(p-vec3(-2.85, .32, .0), vec3(.15, .4, .02)),boatcolor);
     
    p = rotateY(p, -(3.14));
    p = rotateY(p -vec3(.0, .0, sin(iTime)/5.0), sin(iTime)/4.0);
    vec4 boxtest = vec4(boxSDF(p, vec3(1.4)), vec3(1.0));
     vec4 boxtest2 = vec4(boxSDF(p-vec3(0.3, 1.0, 0.0), vec3(1.0, 1.0,1.0)), vec3(1.0));
    vec4 sail = vec4(prismSDF(p-vec3(.18, 2.9, .0), .9, 1.7, .02),vec3(.9));
 
    float stiebas2 = boxSDF(p-vec3(0.19, 1.2, .0), vec3(0.9, .03, 0.03)); // stiebas 2
    vec4 combination =  unionS(unionS(unionS(unionS(plane, vec4(boat, boatcolor)), sail), vec4(stiebas2, vec3(boatcolor))), steering);
    //p = rotateY(p, 3.14/2.0+3.14);
    vec4 hyper = vec4(hyperbolicParaboloid(p-vec3(0.0, 2.4, -1.0), 3.0, 4.0, boundsMin, boundsMax), vec3(1.0));
    vec4 hyper2 = vec4(hyperbolicParaboloid(p-vec3(.0, 2.0, -2.0), 2.0, 2.0, boundsMin, boundsMax), vec3(.0));
    vec4 hyper3 = vec4(max(-hyper.x, hyper2.x), vec3(1.0));
    vec4 bettersail = hyper;
    
   
    //combination = unionS(combination, bettersail);
    //combination = unionS(unionS(combination, hyper), hyper2);
    combination = unionS(unionS(unionS(unionS(cylinder, combination), sail2), steering2), sitting);
    return combination; 
}
vec3 calcNormal(vec3 p) {
    const float h = 0.00001; // replace by an appropriate value
    const vec2 k = vec2(1,-1);
    return normalize(k.xyy*scene(p+k.xyy*h).x+k.yyx*scene(p+k.yyx*h).x+k.yxy*scene(p+k.yxy*h).x+k.xxx*scene(p+k.xxx*h).x);
}
 
float shadows(vec3 rayOrigin, vec3 light) {
    float d = 100.0*THRESHOLD;
    vec3 rayHeading = normalize(light-rayOrigin);
    float val = 1.0;
    for(int i = 0; i<MAX_STEPS; i++) {
        vec3 p = rayOrigin+d*rayHeading;
        vec4 sd = scene(p);
        if(sd.x<THRESHOLD) {
            return 0.0;
        }
        val = min(val, 8.0*sd.x/d);
        float distToLight = length(light-p);
        if(distToLight<THRESHOLD) {
            return val;
        }
        d += min(sd.x, distToLight);
        if(d>MAX_DIST) {
            break;
        }
    }
    return 1.0;
}
 
vec3 lighting(vec3 p) {
    Light lights[3];
    lights[0] = Light(vec3(-2., 7., 5.), vec3(1.0));
    lights[1] = Light(vec3(2., 7., -3.), vec3(.6));
    lights[2] = Light(vec3(-2., 7., -3.), vec3(.6));
   
 
    vec3 color = vec3(0.0);
    vec3 norm = calcNormal(p);
    for(int i = 0; i<lights.length(); i++) {
        vec3 toLight = normalize(lights[i].pos-p);
        color += shadows(p, lights[i].pos)* //
            clamp(dot(toLight, norm), 0., 1.)* //
            lights[i].color;
    }
    return color;
}
 
vec3 rayMarch(vec3 rayOrigin, vec3 rayHeading) {
    float d = 0.0;
    for(int i = 0; i<MAX_STEPS; i++) {
        vec3 p = rayOrigin+d*rayHeading;
        vec4 sd = scene(p);
        vec3 objectColor = sd.yzw;
        if(sd.x<THRESHOLD) {
            return (objectColor*lighting(p));
        }
        d += sd.x;
        if(d>MAX_DIST) {
            break;
        }
    }
    return vec3(135.0,206.0,235.0)/255.0;
}
 
void mainImage(out vec4 fragColor, in vec2 fragCoord) {
    vec3 uv = vec3(fragCoord/iResolution.xy, 1.0);
    uv.xy -= 0.5;
    uv.x *= iResolution.x/iResolution.y;
    float PI = 3.14;
    //uv = rotateX(vec3(uv.x, uv.y, 0.9), 0.7) *uv;
    vec3 rd = normalize(vec3(uv.xy,-1.0));
    rd = rotate3dX(-0.5)*rd; // rotate the camera down
    
    rd = rotate3dY((iTime-.2)/2.0)*rd;
   
    vec3 ro = vec3(4.0*sin(iTime/2.0), 4.0+sin(iTime), 7.0*cos(iTime/2.0)+1.0);
 
    vec3 color = rayMarch(ro, rd);
 
    fragColor = vec4(color, 1.0);
}
