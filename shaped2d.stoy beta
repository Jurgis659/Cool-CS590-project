#define PI 3.14159

float circle(float r, vec2 uv){
   float dist = length(uv);
   float color = step(dist, r);
   return color; 
}
float rect(vec2 bl, vec2 tr, vec2 uv){
   float a = step(bl.x, uv.x);
   float b = step(uv.y, tr.y);
   float c  = step(uv.x, tr.x);
   float d = step(bl.y, uv.y);
   return a*b*c*d;
}

float rectSdf(vec2 bl, vec2 tr, vec2 uv) {
    float red = uv.x - tr.x;
    float bed = bl.y - uv.y;
    float led = bl.x - uv.x;
    float ted = uv.y - tr.y;
    return max(max(red, bed), max(led, ted));
}

float circleSdf(vec2 center, float r, vec2 uv) {
    return length(uv - center) - r;
}

float sphereSdf(vec3 center, float r, vec3 uv) {
    return length(uv - center) - r;
}


float sdCutDisk( in vec2 p, in float r, in float h )
{
    float w = sqrt(r*r-h*h); // constant for any given shape
    p.x = abs(p.x);
    float s = max( (h-r)*p.x*p.x+w*w*(h+r-2.0*p.y), h*p.x-w*p.y );
    return (s<0.0) ? length(p)-r :
           (p.x<w) ? h - p.y     :
                     length(p-vec2(w,h));
}

float dot2 (in vec2 v) {return dot(v,v);}

float sdStairs( in vec2 p, in vec2 wh, in float n )
{
    vec2 ba = wh*n;
    float d = min(dot2(p-vec2(clamp(p.x,0.0,ba.x),0.0)), 
                  dot2(p-vec2(ba.x,clamp(p.y,0.0,ba.y))) );
    float s = sign(max(-p.y,p.x-ba.x) );

    float dia = length(wh);
    p = mat2(wh.x,-wh.y, wh.y,wh.x)*p/dia;
    float id = clamp(round(p.x/dia),0.0,n-1.0);
    p.x = p.x - id*dia;
    p = mat2(wh.x, wh.y,-wh.y,wh.x)*p/dia;

    float hh = wh.y/2.0;
    p.y -= hh;
    if( p.y>hh*sign(p.x) ) s=1.0;
    p = (id<0.5 || p.x>0.0) ? p : -p;
    d = min( d, dot2(p-vec2(0.0,clamp(p.y,-hh,hh))) );
    d = min( d, dot2(p-vec2(clamp(p.x,0.0,wh.x),hh)) );
    
    return sqrt(d)*s;
}

float sdBox( in vec2 p, in vec2 b )
{
    vec2 d = abs(p)-b;
    return length(max(d,0.0)) + min(max(d.x,d.y),0.0);
}

float sdParabola( in vec2 pos, in float k )
{
    pos.x = abs(pos.x);
    float ik = 1.0/k;
    float p = ik*(pos.y - 0.5*ik)/3.0;
    float q = 0.25*ik*ik*pos.x;
    float h = q*q - p*p*p;
    float r = sqrt(abs(h));
    float x = (h>0.0) ? 
        pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q) :
        2.0*cos(atan(r,q)/3.0)*sqrt(p);
    return length(pos-vec2(x,k*x*x)) * sign(pos.x-x);
}

float sdParabola( in vec2 pos, in float wi, in float he )
{
    pos.x = abs(pos.x);
    float ik = wi*wi/he;
    float p = ik*(he-pos.y-0.5*ik)/3.0;
    float q = pos.x*ik*ik*0.25;
    float h = q*q - p*p*p;
    float r = sqrt(abs(h));
    float x = (h>0.0) ? 
        pow(q+r,1.0/3.0) - pow(abs(q-r),1.0/3.0)*sign(r-q) :
        2.0*cos(atan(r/q)/3.0)*sqrt(p);
    x = min(x,wi);
    return length(pos-vec2(x,he-x*x/ik)) * 
           sign(ik*(pos.y-he)+pos.x*pos.x);
}

float sdTunnel( in vec2 p, in vec2 wh )
{
    p.x = abs(p.x); p.y = -p.y;
    vec2 q = p - wh;

    float d1 = dot2(vec2(max(q.x,0.0),q.y));
    q.x = (p.y>0.0) ? q.x : length(p)-wh.x;
    float d2 = dot2(vec2(q.x,max(q.y,0.0)));
    float d = sqrt( min(d1,d2) );
    
    return (max(q.x,q.y)<0.0) ? -d : d;
}

float smin( float a, float b, float k )
{
    k *= 1.0;
    float r = exp2(-a/k) + exp2(-b/k);
    return -k*log2(r);
}

float sdCircle( vec2 p, float r )
{
    return length(p) - r;
}

struct Shape {
    float sdf;
    vec3 color;
};

Shape combineShapes(Shape shape1, Shape shape2) {
    Shape result;
    if (shape1.sdf == 1.0) {
        result.sdf = 1.0;
        result.color = shape1.color;
    }

    else if (shape2.sdf == 1.0) {
        result.sdf = 1.0;
        result.color = shape2.color;
    }

    else {
        result.sdf = 0.0;
        result.color = vec3(0.0);
    }

    return result;
}

Shape combineShapes2(Shape shape1, Shape shape2) {
    Shape result;
    float totalSdf = max(shape1.sdf, shape2.sdf);

    vec3 blendedColor = (shape1.sdf * shape1.color + shape2.sdf * shape2.color) / (shape1.sdf + shape2.sdf + 0.00001);

    if (totalSdf == 0.0) {
        blendedColor = vec3(0.0);
    }
    result.sdf = totalSdf;
    result.color = blendedColor;

    return result;
}

mat3 moveMat(vec2 offset) {
    mat3 M;
    M[0] = vec3(1.0, 0.0, 0.0);
    M[1] = vec3(0.0, 1.0, 0.0);
    M[2] = vec3(offset.x, offset.y, 1.0);
    return M;
}

mat3 scaleMat(vec2 scale) {
    mat3 M;
    M[0] = vec3(scale.x, 0.0, 0.0);
    M[1] = vec3(0.0, scale.y, 0.0);
    M[2] = vec3(0.0, 0.0, 1.0);
    return M;
}

mat3 scaleMat(float scale) {
    mat3 M;
    M[0] = vec3(scale, 0.0, 0.0);
    M[1] = vec3(0.0, scale, 0.0);
    M[2] = vec3(0.0, 0.0, 1.0);
    return M;
}

mat3 rotationMat(float theta) {
    mat3 M;
    M[0] = vec3(cos(theta), sin(theta), 0.0);
    M[1] = vec3(-sin(theta), cos(theta), 0.0);
    M[2] = vec3(0.0, 0.0, 1.0);
    return M;
}

mat3 rotationMat(float theta, vec2 pivot) {
    return moveMat(pivot) * rotationMat(theta) * moveMat(-pivot);
}

float easeInOutSine(float number) {
    return -(cos(PI * number) - 1.0) / 2.0;
}

float easeInOutQuad(float x) {
    return x < 0.5 ? 2.0 * x * x : 1.0 - pow(-2.0 * x + 2.0, 2.0) / 2.0;
}

float sdTrapezoid( in vec2 p, in float r1, float r2, float he )
{
    vec2 k1 = vec2(r2,he);
    vec2 k2 = vec2(r2-r1,2.0*he);
    p.x = abs(p.x);
    vec2 ca = vec2(p.x-min(p.x,(p.y<0.0)?r1:r2), abs(p.y)-he);
    vec2 cb = p - k1 + k2*clamp( dot(k1-p,k2)/dot2(k2), 0.0, 1.0 );
    float s = (cb.x<0.0 && ca.y<0.0) ? -1.0 : 1.0;
    return s*sqrt( min(dot2(ca),dot2(cb)) );
}

float signf(vec2 p1, vec2 p2, vec2 p3) {
    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y);
}

bool pointInQuadrilateral(vec2 p, vec2 a, vec2 b, vec2 c, vec2 d) {
    bool b1 = signf(p, a, b) < 0.0;
    bool b2 = signf(p, b, c) < 0.0;
    bool b3 = signf(p, c, d) < 0.0;
    bool b4 = signf(p, d, a) < 0.0;

    return (b1 == b2) && (b2 == b3) && (b3 == b4);
}

float shadedQuad(vec2 p, vec2 a, vec2 b, vec2 c, vec2 d) {
    if (pointInQuadrilateral(p, a, b, c, d)) {
        return 1.0; 
    }
    return 0.0; 
}

float distanceToLineSegment(vec2 p, vec2 a, vec2 b) {
    vec2 ab = b - a;
    vec2 ap = p - a;
    vec2 bp = p - b;

    float ab2 = dot(ab, ab);
    float ap_ab = dot(ap, ab);
    float t = clamp(ap_ab / ab2, 0.0, 1.0);

    vec2 closestPoint = a + t * ab; 
    vec2 distanceVec = p - closestPoint; 

    return length(distanceVec);
} 

float unshadedQuad(vec2 p, vec2 a, vec2 b, vec2 c, vec2 d, float edgeThickness) {
    float edgeThreshold = edgeThickness;
    float d1 = distanceToLineSegment(p, a, b);
    float d2 = distanceToLineSegment(p, b, c);
    float d3 = distanceToLineSegment(p, c, d);
    float d4 = distanceToLineSegment(p, d, a);

    if (d1 < edgeThreshold || d2 < edgeThreshold || d3 < edgeThreshold || d4 < edgeThreshold) {
        return 1.0; 
    }
    return 0.0;
}

float sdBox( vec3 p, vec3 b )
{
  vec3 q = abs(p) - b;
  return length(max(q,0.0)) + min(max(q.x,max(q.y,q.z)),0.0);
}

float sdPlane( vec3 p, vec3 n, float h )
{
  // n must be normalized
  return dot(p,n) + h;
}

float sdHexPrism( vec3 p, vec2 h )
{
  const vec3 k = vec3(-0.8660254, 0.5, 0.57735);
  p = abs(p);
  p.xy -= 2.0*min(dot(k.xy, p.xy), 0.0)*k.xy;
  vec2 d = vec2(
       length(p.xy-vec2(clamp(p.x,-k.z*h.x,k.z*h.x), h.x))*sign(p.y-h.x),
       p.z-h.y );
  return min(max(d.x,d.y),0.0) + length(max(d,0.0));
}

float sdCutHollowSphere( vec3 p, float r, float h, float t )
{
  // sampling independent computations (only depend on shape)
  float w = sqrt(r*r-h*h);
  
  // sampling dependant computations
  vec2 q = vec2( length(p.xz), p.y );
  return ((h*q.x<w*q.y) ? length(q-vec2(w,h)) : 
                          abs(length(q)-r) ) - t;
}

float sdCone( vec3 p, vec2 c, float h )
{
  // c is the sin/cos of the angle, h is height
  // Alternatively pass q instead of (c,h),
  // which is the point at the base in 2D
  vec2 q = h*vec2(c.x/c.y,-1.0);
    
  vec2 w = vec2( length(p.xz), p.y );
  vec2 a = w - q*clamp( dot(w,q)/dot(q,q), 0.0, 1.0 );
  vec2 b = w - q*vec2( clamp( w.x/q.x, 0.0, 1.0 ), 1.0 );
  float k = sign( q.y );
  float d = min(dot( a, a ),dot(b, b));
  float s = max( k*(w.x*q.y-w.y*q.x),k*(w.y-q.y)  );
  return sqrt(d)*sign(s);
}












// Utility SDF functions
float sdBox2(vec3 p, vec3 b) {
    vec3 d = abs(p) - b;
    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);
}

float sdCapsule(vec3 p, vec3 a, vec3 b, float r) {
    vec3 pa = p - a, ba = b - a;
    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);
    return length(pa - ba * h) - r;
}

// Boat Hull
float sdLargeBoatHull(vec3 p) {
    vec3 hullDims = vec3(1.2, 0.3, 2.5);
    p.y -= hullDims.y;  // Adjust Y-axis to center the hull
    p.xz = abs(p.xz);   // Mirror for symmetry

    float hullMain = sdBox(p, hullDims);      // Main rectangular hull
    float hullRoundedFront = sdCapsule(p, vec3(-hullDims.x, 0.0, hullDims.z), vec3(hullDims.x, 0.0, hullDims.z), 0.2);
    return min(hullMain, hullRoundedFront);   // Union
}

// Boat Deck
float sdBoatDeck(vec3 p) {
    vec3 deckDims = vec3(1.1, 0.05, 2.3);
    p.y -= 0.3;  // Position the deck slightly above the hull
    return sdBox(p, deckDims);
}

// Cabin 1 (main cabin)
float sdBoatMainCabin(vec3 p) {
    vec3 cabinPos = vec3(0.0, 0.35, -0.5);
    vec3 cabinDims = vec3(0.5, 0.3, 0.6);
    return sdBox(p - cabinPos, cabinDims);
}

// Mast
float sdBoatMast(vec3 p) {
    vec3 mastPos = vec3(0.0, 0.9, -0.2);
    vec3 mastDims = vec3(0.05, 1.5, 0.05);  // Taller mast to support a giant sail
    return sdBox(p - mastPos, mastDims);
}

// Giant Sail
float sdGiantSail(vec3 p) {
    vec3 mastBase = vec3(0.0, 0.8, -0.2);      // Base of the sail at the mast
    vec3 sailTop = vec3(0.0, 1.8, 1.2);        // Top of the giant sail, extended forward
    vec3 sailEdge = vec3(0.6, 0.8, 0.0);       // Horizontal extension for a "curved" effect

    // Main vertical part of the sail
    float sailMain = sdCapsule(p, mastBase, sailTop, 0.05);
    
    // Large, sweeping arc effect
    float sailCurve = sdCapsule(p, mastBase, mastBase + sailEdge, 0.05);
    
    // Combine the main sail and curved edge
    return min(sailMain, sailCurve);
}

// Boat Composition
float sdBoat(vec3 p) {
    float hull = sdLargeBoatHull(p);
    float deck = sdBoatDeck(p);
    float mainCabin = sdBoatMainCabin(p);
    float mast = sdBoatMast(p);
    float giantSail = sdGiantSail(p);

    // Combine all parts
    return min(min(min(hull, deck), min(mainCabin, mast)), giantSail);
}


float sdfBox(vec3 p, vec3 b) {
    vec3 d = abs(p) - b;
    return length(max(d, 0.0)) + min(max(d.x, max(d.y, d.z)), 0.0);
}
